#include <iostream>
using namespace std;

// Define the structure of a Node for Doubly Linked List
struct Node {
    int data;
    Node* next;
    Node* prev;

    Node(int val) {
        data = val;
        next = nullptr;
        prev = nullptr;
    }
};

// Function to delete the k-th node of the Doubly Linked List
void deleteKthNode(Node*& head, Node*& tail, int k) {
    // If the list is empty
    if (head == nullptr) {
        cout << "List is empty. Nothing to delete." << endl;
        return;
    }

    // If k is less than 1, it's an invalid index
    if (k < 1) {
        cout << "Invalid index." << endl;
        return;
    }

    // Find the k-th node (1-based index)
    Node* temp = head;
    int count = 1;
    while (temp != nullptr && count < k) {
        temp = temp->next;
        count++;
    }

    // If the k-th node is not found (i.e., k is greater than the number of nodes)
    if (temp == nullptr) {
        cout << "Index out of bounds." << endl;
        return;
    }

    // If the node to be deleted is the head
    if (temp == head) {
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
    }
    // If the node to be deleted is the tail
    else if (temp == tail) {
        tail = tail->prev;
        if (tail != nullptr) {
            tail->next = nullptr;
        }
    }
    // If the node to be deleted is in the middle
    else {
        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
    }

    // Deallocate the node
    delete temp;
}

// Function to print the Doubly Linked List
void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    // Create a doubly linked list with nodes
    Node* head = new Node(10);
    Node* tail = head;

    // Add more nodes to the DLL
    Node* second = new Node(20);
    Node* third = new Node(30);
    Node* fourth = new Node(40);

    head->next = second;
    second->prev = head;
    second->next = third;
    third->prev = second;
    third->next = fourth;
    fourth->prev = third;
    tail = fourth;

    // Print the original list
    cout << "Original List: ";
    printList(head);

    // Delete the 3rd node (k=3)
    deleteKthNode(head, tail, 3);

    // Print the list after deleting the 3rd node
    cout << "List After Deleting 3rd Node: ";
    printList(head);

    return 0;
}
